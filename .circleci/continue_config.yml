version: 2.1

parameters:
  run-server-jobs:
    type: boolean
    default: false
  run-client-jobs:
    type: boolean
    default: false
  run-task-job:
    type: boolean
    default: false

orbs:
  gcp-cli: circleci/gcp-cli@3.2.2
  aws-ecs: circleci/aws-ecs@7.1.0
  aws-cli: circleci/aws-cli@5.4.1

executors:
  node-exec:
    docker:
      - image: node:22.17-alpine3.22
  base-exec:
    docker:
      - image: cimg/base:current-24.04

commands:
  installdeps:
    description: "Install dependencies"
    parameters:
      directory:
        type: string
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - v1-<< parameters.directory >>-deps-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
            - v1-<< parameters.directory >>-deps-{{ checksum "package.json" }}
            - v1-<< parameters.directory >>-deps-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: v1-<< parameters.directory >>-deps-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
  get-image-tag:
    description: "Retrieve tag for Docker image"
    parameters:
      directory:
        type: string
    steps:
      - run:
          name: Export version from package.json
          command: |
            IMAGE_TAG=$(jq -r '.version' ~/project/<< parameters.directory >>/package.json)
            echo "export IMAGE_TAG=$IMAGE_TAG" >> $BASH_ENV
            echo "IMAGE_TAG: $IMAGE_TAG"
            source $BASH_ENV

jobs:
  test-client:
    executor: node-exec
    working_directory: ~/project/client
    steps:
      - installdeps:
          directory: client
      - run:
          name: Run client tests
          command: npm test

  test-server:
    executor: base-exec
    working_directory: ~/project/server
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          docker_layer_caching: true
      - get-image-tag:
          directory: server
      - run:
          name: Spin up containers and run server tests
          command: |
            docker images
            docker compose -f compose.yaml -f compose.cicd.yaml up --build -d
            docker exec -it --user root nodejs-server-prod npm install
            docker exec -it nodejs-server-prod npm test
      - run:
          name: Stop and remove containers
          command: docker compose down -v
            
  build-docker-image:
    description: Build and publish << parameters.service >> Docker image
    parameters:
      service:
        type: string
      build_context:
        type: string
    executor: base-exec
    working_directory: ~/project/<< parameters.service >>
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          docker_layer_caching: true
      - get-image-tag:
          directory: << parameters.service >>
      - run:
          name: Build << parameters.service >> image
          command: |
            docker build \
              -t $DOCKERHUB_USERNAME/carastore-<< parameters.service >>:$IMAGE_TAG \
              -t $DOCKERHUB_USERNAME/carastore-<< parameters.service >>:latest \
              << parameters.build_context >>
      - run:
          name: Authenticate and push image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push -a $DOCKERHUB_USERNAME/carastore-<< parameters.service >>
  
  deploy-client:
    executor: gcp-cli/default
    steps:
      - checkout
      - get-image-tag:
          directory: client
      - gcp-cli/setup:
          gcloud_service_key: GCLOUD_SERVICE_KEY
          google_compute_region: GCP_REGION
          google_project_id: GOOGLE_PROJECT_ID
      - run:
          name: Deploy to Google Cloud Run
          command: |
            IMAGE="docker.io/$DOCKERHUB_USERNAME/carastore-client:$IMAGE_TAG"
            
            gcloud run deploy "$SERVICE_NAME" \
              --image "$IMAGE" \
              --service-account "$RUNTIME_SA_EMAIL" \
              --allow-unauthenticated \
              --region "$GCP_REGION" \
              --platform managed \
              --port $CLIENT_APP_PORT \
              --cpu 1 \
              --memory 512Mi \
              --min-instances 0 \
              --max-instances 1 \
              --set-env-vars VITE_API_URL=$VITE_API_URL
      - run:
          name: Verify deployment success
          command: |
            URL=$(gcloud run services describe "$SERVICE_NAME" \
              --region "$GCP_REGION" \
              --format='value(status.url)')
            echo "[INFO] Service URL: $URL"
            for i in {1..30}; do
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
              if [ "$STATUS" -eq 200 ]; then
                echo "[SUCCESS] Deployment verified"
                exit 0
              fi
              echo "[WARN] Got $STATUS, retrying in 10s... ($i/30)"
              sleep 10
            done
            echo "[ERROR] Deployment verification timed out after 5 minutes"
            exit 1

  deploy-server:
    executor: base-exec
    working_directory: ~/project/deployments/ecs
    steps:
      - checkout:
          path: ~/project
      - get-image-tag:
          directory: server
      - run:
          name: Substitute env placeholders in task definition
          command: |
            envsubst < templates/task-definition.template.json > task-definition.json
      - aws-cli/setup:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
          region: $AWS_REGION
      - aws-ecs/update_task_definition_from_json:
          region: $AWS_REGION
          task_definition_json: task-definition.json
      - aws-ecs/update_service:
          region: $AWS_REGION
          family: "$MY_APP_PREFIX-server"
          service_name: "$MY_APP_PREFIX-service"
          cluster: "$MY_APP_PREFIX-cluster"
          create_service: true
          desired_count: "1"
          container_name: "nodejs-server"
          container_port: "5000"
          target_group: $TG_ARN
          skip_task_definition_registration: true
      - aws-ecs/verify_revision_is_deployed:
          region: $AWS_REGION
          family: "$MY_APP_PREFIX-server"
          service_name: "$MY_APP_PREFIX-service"
          cluster: "$MY_APP_PREFIX-cluster"
          task_definition_arn: $CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN
          max_poll_attempts: 20

  deployment-coordinator:
    type: no-op

workflows:
  build-test-and-deploy-client:
    when: << pipeline.parameters.run-client-jobs >>
    jobs:
      - test-client
      - build-docker-image:
          name: build-client-image
          service: client
          build_context: .
          requires:
            - test-client
      - deploy-client:
          requires:
            - build-client-image
            
  build-test-and-deploy-server:
    when:
      or: [<< pipeline.parameters.run-server-jobs >>, << pipeline.parameters.run-task-job >>]
    jobs:
      - build-docker-image:
          name: build-server-image
          service: server
          build_context: --target prod .
          filters:
            pipeline.parameters.run-server-jobs
      - test-server:
          requires:
            - build-server-image
          filters:
            pipeline.parameters.run-server-jobs
      - deployment-coordinator
      - deploy-server:
          requires:
            - test-server
            - deployment-coordinator